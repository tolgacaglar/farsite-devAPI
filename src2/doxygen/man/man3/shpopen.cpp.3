.TH "C:/Users/tolk1/Dropbox/SDSC/WiFire/farsite-devAPI/src2/shpopen.cpp" 3 "farsite4P" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/tolk1/Dropbox/SDSC/WiFire/farsite-devAPI/src2/shpopen.cpp
.SH SYNOPSIS
.br
.PP
\fR#include 'shapefil\&.h'\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <limits\&.h>\fP
.br
\fR#include <assert\&.h>\fP
.br
\fR#include <stdlib\&.h>\fP
.br
\fR#include <string\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBFALSE\fP   0"
.br
.ti -1c
.RI "#define \fBTRUE\fP   1"
.br
.ti -1c
.RI "#define \fBByteCopy\fP(a,  b,  c)   \fBmemcpy\fP( b, a, c )"
.br
.ti -1c
.RI "#define \fBMIN\fP(a,  b)   ((a<b) ? a : b)"
.br
.ti -1c
.RI "#define \fBMAX\fP(a,  b)   ((a>b) ? a : b)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned char \fBuchar\fP"
.br
.ti -1c
.RI "typedef int \fBint32\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBSHPHandle\fP \fBSHPAPI_CALL\fP \fBSHPOpen\fP (const char *pszLayer, const char *pszAccess)"
.br
.ti -1c
.RI "void \fBSHPAPI_CALL\fP \fBSHPClose\fP (\fBSHPHandle\fP psSHP)"
.br
.ti -1c
.RI "void \fBSHPAPI_CALL\fP \fBSHPGetInfo\fP (\fBSHPHandle\fP psSHP, int *pnEntities, int *pnShapeType, double *padfMinBound, double *padfMaxBound)"
.br
.ti -1c
.RI "\fBSHPHandle\fP \fBSHPAPI_CALL\fP \fBSHPCreate\fP (const char *pszLayer, int nShapeType)"
.br
.ti -1c
.RI "void \fBSHPAPI_CALL\fP \fBSHPComputeExtents\fP (\fBSHPObject\fP *psObject)"
.br
.ti -1c
.RI "\fBSHPObject\fP \fBSHPAPI_CALL1\fP * \fBSHPCreateObject\fP (int \fBnSHPType\fP, int \fBnShapeId\fP, int nParts, int *panPartStart, int *panPartType, int \fBnVertices\fP, double *padfX, double *padfY, double *padfZ, double *padfM){\fBSHPObject\fP *psObject;int i, bHasM, \fBbHasZ\fP;psObject=(\fBSHPObject\fP *) calloc(1, sizeof(\fBSHPObject\fP)"
.br
.ti -1c
.RI "\fBif\fP (\fBnSHPType\fP==\fBSHPT_ARCM\fP||\fBnSHPType\fP==\fBSHPT_POINTM\fP||\fBnSHPType\fP==\fBSHPT_POLYGONM\fP||\fBnSHPType\fP==\fBSHPT_MULTIPOINTM\fP)"
.br
.ti -1c
.RI "\fBif\fP (\fBnVertices\fP > 0)"
.br
.ti -1c
.RI "\fBSHPComputeExtents\fP (psObject)"
.br
.ti -1c
.RI "\fBreturn\fP (psObject)"
.br
.ti -1c
.RI "\fBSHPObject\fP \fBSHPAPI_CALL1\fP * \fBSHPCreateSimpleObject\fP (int \fBnSHPType\fP, int \fBnVertices\fP, double *padfX, double *padfY, double *padfZ){\fBreturn\fP(\fBSHPCreateObject\fP(\fBnSHPType\fP, \-1, 0, NULL, NULL, \fBnVertices\fP, padfX, padfY, padfZ, NULL)"
.br
.ti -1c
.RI "int \fBSHPAPI_CALL\fP \fBSHPWriteObject\fP (\fBSHPHandle\fP psSHP, int \fBnShapeId\fP, \fBSHPObject\fP *psObject)"
.br
.ti -1c
.RI "\fBSHPObject\fP \fBSHPAPI_CALL1\fP * \fBSHPReadObject\fP (\fBSHPHandle\fP psSHP, int hEntity){\fBSHPObject\fP *\fBpsShape\fP;\fBif\fP(hEntity< 0||hEntity >=psSHP\->nRecords) \fBreturn\fP(NULL"
.br
.ti -1c
.RI "\fBif\fP (psSHP\->panRecSize[hEntity]+8 > nBufSize)"
.br
.ti -1c
.RI "\fBfseek\fP (psSHP\->fpSHP, psSHP\->panRecOffset[hEntity], 0)"
.br
.ti -1c
.RI "\fBfread\fP (\fBpabyRec\fP, psSHP\->panRecSize[hEntity]+8, 1, psSHP\->fpSHP)"
.br
.ti -1c
.RI "\fBif\fP (bBigEndian) SwapWord(4"
.br
.ti -1c
.RI "\fBif\fP (\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_POLYGON\fP||\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_ARC\fP||\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_POLYGONZ\fP||\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_POLYGONM\fP||\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_ARCZ\fP||\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_ARCM\fP||\fBpsShape\fP\->\fBnSHPType\fP==\fBSHPT_MULTIPATCH\fP)"
.br
.ti -1c
.RI "\fBreturn\fP (\fBpsShape\fP)"
.br
.ti -1c
.RI "const char \fBSHPAPI_CALL1\fP * \fBSHPTypeName\fP (int \fBnSHPType\fP){switch(\fBnSHPType\fP"
.br
.ti -1c
.RI "const char \fBSHPAPI_CALL1\fP * \fBSHPPartTypeName\fP (int nPartType){switch(nPartType"
.br
.ti -1c
.RI "void \fBSHPAPI_CALL\fP \fBSHPDestroyObject\fP (\fBSHPObject\fP *\fBpsShape\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "psObject \fBnSHPType\fP = nSHPType"
.br
.ti -1c
.RI "psObject \fBnShapeId\fP = nShapeId"
.br
.ti -1c
.RI "\fBelse\fP"
.br
.ti -1c
.RI "\fBbHasZ\fP = \fBFALSE\fP"
.br
.ti -1c
.RI "psObject \fBnVertices\fP = nVertices"
.br
.ti -1c
.RI "\fBpsShape\fP = (\fBSHPObject\fP*) calloc(1, sizeof(\fBSHPObject\fP))"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ByteCopy(a, b, c)   \fBmemcpy\fP( b, a, c )"

.PP
Definition at line \fB188\fP of file \fBshpopen\&.cpp\fP\&.
.SS "#define FALSE   0"

.PP
Definition at line \fB184\fP of file \fBshpopen\&.cpp\fP\&.
.SS "#define MAX(a, b)   ((a>b) ? a : b)"

.PP
Definition at line \fB191\fP of file \fBshpopen\&.cpp\fP\&.
.SS "#define MIN(a, b)   ((a<b) ? a : b)"

.PP
Definition at line \fB190\fP of file \fBshpopen\&.cpp\fP\&.
.SS "#define TRUE   1"

.PP
Definition at line \fB185\fP of file \fBshpopen\&.cpp\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef int \fBint32\fP"

.PP
Definition at line \fB180\fP of file \fBshpopen\&.cpp\fP\&.
.SS "typedef unsigned char \fBuchar\fP"

.PP
Definition at line \fB175\fP of file \fBshpopen\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "fread (\fBpabyRec\fP, psSHP\->panRecSize+ 8[hEntity], 1, psSHP\-> fpSHP)"

.SS "fseek (psSHP\-> fpSHP, psSHP\-> panRecOffset[hEntity], 0)"

.SS "if (bBigEndian)"

.SS "if (\fBnSHPType\fP = \fR= \fBSHPT_ARCM\fP || \fBnSHPType\fP == \fBSHPT_POINTM\fP || \fBnSHPType\fP == \fBSHPT_POLYGONM\fP || \fBnSHPType\fP == \fBSHPT_MULTIPOINTM\fP\fP)"

.PP
Definition at line \fB838\fP of file \fBshpopen\&.cpp\fP\&.
.SS "if (\fBnVertices\fP, 0)"

.PP
Definition at line \fB895\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBelse\fP if (\fBpsShape\fP\-> nSHPType = \fR= \fBSHPT_POLYGON\fP || \fBpsShape\fP\->\fBnSHPType\fP == \fBSHPT_ARC\fP || \fBpsShape\fP\->\fBnSHPType\fP == \fBSHPT_POLYGONZ\fP || \fBpsShape\fP\->\fBnSHPType\fP == \fBSHPT_POLYGONM\fP || \fBpsShape\fP\->\fBnSHPType\fP == \fBSHPT_ARCZ\fP || \fBpsShape\fP\->\fBnSHPType\fP == \fBSHPT_ARCM\fP || \fBpsShape\fP\->\fBnSHPType\fP == \fBSHPT_MULTIPATCH\fP\fP)"

.PP
Definition at line \fB1376\fP of file \fBshpopen\&.cpp\fP\&.
.SS "if (psSHP\->panRecSize+ 8[hEntity], nBufSize)"

.PP
Definition at line \fB1351\fP of file \fBshpopen\&.cpp\fP\&.
.SS "return (psObject)"

.SS "return (\fBpsShape\fP)"

.SS "void \fBSHPAPI_CALL\fP SHPClose (\fBSHPHandle\fP psSHP)"

.PP
Definition at line \fB587\fP of file \fBshpopen\&.cpp\fP\&.
.SS "SHPComputeExtents (psObject)"

.SS "void \fBSHPAPI_CALL\fP SHPComputeExtents (\fBSHPObject\fP * psObject)"

.PP
Definition at line \fB786\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBSHPHandle\fP \fBSHPAPI_CALL\fP SHPCreate (const char * pszLayer, int nShapeType)"

.PP
Definition at line \fB649\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBSHPObject\fP \fBSHPAPI_CALL1\fP * SHPCreateObject (int nSHPType, int nShapeId, int nParts, int * panPartStart, int * panPartType, int nVertices, double * padfX, double * padfY, double * padfZ, double * padfM)"

.SS "\fBSHPObject\fP \fBSHPAPI_CALL1\fP * SHPCreateSimpleObject (int nSHPType, int nVertices, double * padfX, double * padfY, double * padfZ)"

.SS "void \fBSHPAPI_CALL\fP SHPDestroyObject (\fBSHPObject\fP * psShape)"

.PP
Definition at line \fB1760\fP of file \fBshpopen\&.cpp\fP\&.
.SS "void \fBSHPAPI_CALL\fP SHPGetInfo (\fBSHPHandle\fP psSHP, int * pnEntities, int * pnShapeType, double * padfMinBound, double * padfMaxBound)"

.PP
Definition at line \fB622\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBSHPHandle\fP \fBSHPAPI_CALL\fP SHPOpen (const char * pszLayer, const char * pszAccess)"

.PP
Definition at line \fB356\fP of file \fBshpopen\&.cpp\fP\&.
.SS "const char \fBSHPAPI_CALL1\fP * SHPPartTypeName (int nPartType)"

.PP
Definition at line \fB1733\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBSHPObject\fP \fBSHPAPI_CALL1\fP * SHPReadObject (\fBSHPHandle\fP psSHP, int hEntity) \-> nRecords) \fBreturn\fP(NULL"

.SS "const char \fBSHPAPI_CALL1\fP * SHPTypeName (int nSHPType)"

.PP
Definition at line \fB1690\fP of file \fBshpopen\&.cpp\fP\&.
.SS "int \fBSHPAPI_CALL\fP SHPWriteObject (\fBSHPHandle\fP psSHP, int nShapeId, \fBSHPObject\fP * psObject)"

.PP
Definition at line \fB948\fP of file \fBshpopen\&.cpp\fP\&.
.SH "Variable Documentation"
.PP 
.SS "bHasZ = \fBFALSE\fP"

.PP
Definition at line \fB858\fP of file \fBshpopen\&.cpp\fP\&.
.SS "else"
\fBInitial value:\fP.PP
.nf
{
    bHasM = FALSE
.fi

.PP
Definition at line \fB855\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBpsShape\fP nShapeId = nShapeId"

.PP
Definition at line \fB833\fP of file \fBshpopen\&.cpp\fP\&.
.SS "&\fBpsShape\fP nSHPType = nSHPType"

.PP
Definition at line \fB832\fP of file \fBshpopen\&.cpp\fP\&.
.SS "psObject nVertices = nVertices"

.PP
Definition at line \fB919\fP of file \fBshpopen\&.cpp\fP\&.
.SS "\fBmemcpy\fP & psShape = (\fBSHPObject\fP*) calloc(1, sizeof(\fBSHPObject\fP))"

.PP
Definition at line \fB1366\fP of file \fBshpopen\&.cpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for farsite4P from the source code\&.
